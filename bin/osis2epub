#!/usr/bin/perl

use strict;
use utf8;
use encoding qw(utf8);
use open qw(:encoding(utf8));
use warnings;

use XML::Parser;
use Getopt::Long;
use File::Temp qw(tempdir);

my %opt = (
    verse_per_line => 0, # one verse per line, as KJV is traditionally formatted
    italics => 1, # show words added for translation in italics (e.g. KJV)
    indent_paragraphs => 1,
    ignore_paragraphs => 0,
    ignore_linebreaks => 0,
    interverse => 0, # multiple texts interleaved: add newline after each verse
    html => 1,
    epub => 1,
    superscript_verse_numbers => 1,
    big_chapter_numbers => 0,
    nobreak_verse_numbers => 1,
    output_dir => undef,
    output_file => undef,
    force => 0, # open output file even if a file by that name already exists
    translation_abbrev => undef,
    translation_name => undef,
    title => 'The Holy Bible',
    language => 'en',
    );

Getopt::Long::Configure(qw(gnu_getopt));
GetOptions(
    '1|verse-per-line!' => \$opt{verse_per_line},
    'italics!' => \$opt{italics},
    'indent-paragraphs|indent!' => \$opt{indent_paragraphs},
    'ignore-paragraphs' => \$opt{ignore_paragraphs},
    'ignore-linebreaks' => \$opt{ignore_linebreaks},
    'interverse' => \$opt{interverse},
    'html!' => \$opt{html},
    'epub!' => \$opt{epub},
    'big-chapter-numbers!' => \$opt{big_chapter_numbers},
    'superscript-verse-numbers|superscript!' => \$opt{superscript_verse_numbers},
    'nobreak-verse-numbers|nobreak!' => \$opt{nobreak_verse_numbers},
    'D|output-directory|output-dir=s' => \$opt{output_dir},
    'o|output-file|output=s' => \$opt{output_file},
    'i|input-file|input=s' => \$opt{input_file},
    'f|force!' => \$opt{force},
    'a|translation-abbrev|translation=s' => \$opt{translation_abbrev},
    't|translation-name=s' => \$opt{translation_name},
    'T|title=s' => \$opt{title},
    'language|l=s' => \$opt{language},
    );

if ($opt{output_dir}) {
    # user-specified dir, which we'll keep
    $opt{_output_dir_set} = 1;
    unless (-d $opt{output_dir}) {
        mkdir $opt{output_dir} or die "Failed to create output dir $opt{output_dir}: $!\n";
    }
} else {
    # use a temp. dir, which will be cleaned up
    $opt{output_dir} = tempdir(CLEANUP => 1);
}
my @filelist;

my $input_fh;
if ($opt{input_file}) {
    open $input_fh, $opt{input_file};
} else {
    $input_fh = *STDIN;
}

if ($opt{translation_abbrev}) {
    $opt{output_file} ||= $opt{translation_abbrev} .
        $opt{epub} ? '.epub' : 'txt';
}
die "An output file name (-o) is required\n" unless
    defined $opt{output_file} or !$opt{html} || !$opt{epub};
if ((!$opt{html} || $opt{epub}) && -e $opt{output_file} && !$opt{force}) {
    print STDERR "Refusing to overwrite existing file without --force.\n";
    exit 3;
}
open my $output_file, ">$opt{output_file}" if !$opt{html} && !$opt{epub}; # txt

my %current = (
    book_name => undef,
    chapter_num => undef,
    verse_num => undef,
    );

my $xp = XML::Parser->new(
    Handlers => {
        Start => \&xml_start,
        End => \&xml_end,
        Char => \&xml_char,
    });

#####
my %flag = (
    in_paragraph => 0,
    last_tag => undef,
    last_item => undef,
    new_verse => undef, # no text yet in current verse
    newlines => 0, # kludge to avoid ever having two blank lines in a row
    );
my %in_element;
my $in_line = 0; # within a line;
my @book_names;
my %chapter_count;
sub xml_start {
    my ($expat, $elem, %attr) = @_;
    $in_element{$elem}++;
    my %handlers = (
        book => sub {
            # theoretically this element should enclose the whole book,
            #   but it doesn't, for now
            my %attr = @_;
            if ($opt{html}) {
                # this would be in a separate HTML file
                #   as a title page for the book
                print "<title class=\"book_name\">$attr{name}</title>\n";
            } else {
                print "\n\n$attr{name}\n";
            }
            push @book_names, $attr{name};
        },
        chapter => sub {
            # theoretically this element should enclose the whole chapter,
            #   but it doesn't, for now
            my %attr = @_;
            return unless defined $attr{num} and $attr{_osis2epub};
            if ($opt{html}) {
                (my $key = $current{book_name}) =~ s/ /%20/g;
                my $a_name_st = qq{<a name="${key}%20$attr{num}">};

                print "<br />$a_name_st\n";
                # this would be in a separate HTML file per chapter...
                if ($opt{big_chapter_numbers}) {
                    print "<span class=\"big_chapter_num\">$attr{num}</span>";
                } else {
                    my $chapter_title = chapter_title($current{book_name},
                                                      $attr{num});

                    print
                        "<h2 class=\"chapter_header\">$chapter_title</h2>\n";
                }
                print "</a>\n";
            } else {
                print "\n$current{book_name} $attr{num}\n\n";
            }
        },
        verse => sub {
            my %attr = @_;
            return unless defined $attr{num} and $attr{_osis2epub};

            # delay printing verse number until next char handler run
            $current{verse_num} = $attr{num};
            $flag{new_verse} = 1;
        },
        'q' => sub {
            my %attr = @_;
            # level
            # marker ” or ’
            # eID
            # call xml_char so delayed verse number can be printed
            xml_char(undef, $attr{marker}) if defined $attr{marker};
        },
        divineName => sub {
            my %attr = @_;
            # no attr; surrounds text
            # handled in xml_char
        },
        foreign => sub {
            my %attr = @_;
            # type=x-selah
        },
        l => sub {
            my %attr = @_;
            # eID
            # sID
            # type
            #   x-br
            #   x-indent
            #   x-declares
            # (either eID or eID|type or sID or sID|type)

            if (defined $attr{type} && $attr{type} eq 'x-indent' && !$opt{ignore_paragraphs}) {
                # call xml_char to allow delayed verse number printing
                xml_char(undef, $opt{html} ? "&nbsp;&nbsp;" : "  ");
                return;
            }

            # output no more than one concurrent blank line
            return if $flag{newlines} >= 2;

            if ($opt{ignore_linebreaks}) {
                # keep some whitespace - don't run two lines together
                print ' ' unless $flag{linebreak_whitespace}++;
                return;
            }

            if ($flag{last_tag}[0] eq 'verse') {
                return if $flag{newlines}; # case: Numbers 6:25, etc.
                $flag{newlines}++;
                $current{delayed_text} = '';
                print "<br />" if $opt{html};
                print "\n";
                $in_line = 0;
                return;
            }

            # avoid extra duplicate lines
            # case: Genesis 2:23 (<l x-br><l>
            if (defined $flag{last_item}[0] && $flag{last_item}[0] eq 'l') {
                return;
            }

            $flag{newlines}++;
            $current{delayed_text} = '';
            print "<br />" if $opt{html};
            print "\n";
            $in_line = 0;
        },
        lb => sub {
            my %attr = @_;
            # type:
            #   x-end-paragraph
            #   x-begin-paragraph
            # type and subType
            if (defined $attr{type} and $attr{type} eq 'x-end-paragraph' and
                !$opt{ignore_paragraphs}) {
                $flag{in_paragraph} = 0;
                if ($opt{html}) {
                    print "</p>\n";
                } else {
                    print "\n\n";
                }
                $flag{newlines} = 2;
                $in_line = 0;
            } elsif (defined $attr{type} and $attr{type} eq 'x-begin-paragraph' and
                     !$opt{ignore_paragraphs}) {
                $flag{in_paragraph} = 1;
                if ($opt{html}) {
                    print "\n<p>";
                    print "&nbsp;&nbsp;" if $opt{indent_paragraphs};
                } else {
                    if ($flag{last_tag}[0] ne 'lb' or
                        $flag{last_tag}[1]{type} ne 'x-end-paragraph') {
                        print "\n" x (2 - $flag{newlines});
                    }
                    print "  " if $opt{indent_paragraphs};
                }
                $in_line = 0;
            }
        },
        # this sequence is common at the end of the last verse of a paragraph:
        #  <lb type="x-end-paragraph"/> <lb type="x-begin-paragraph"/><milestone type="line"/>
        milestone => sub {
            my %attr = @_;

            if ($in_line && $attr{type} eq 'line') {
                if ($opt{verse_per_line}) {
                    $current{delayed_text} = '';
                    print "<br />" if $opt{html};
                }
                print $opt{verse_per_line} ? "\n" : " ";
            } elsif ($attr{type} eq 'x-p' && !$opt{ignore_paragraphs}) {
                # KJV has <milestone marker="¶" type="x-p"/> at the start of
                # paragraphs, except not at the beginning of the first verse of
                # a chapter
                $flag{in_paragraph} = 1;
                print "<p>" if $opt{html};
                print $opt{html} ? "&nbsp;&nbsp;" : '  '
                    if $opt{indent_paragraphs};
                print "\n";
            }
        },
        lg => sub {
            my %attr = @_;
            # only eID or sID
        },
        transChange => sub {
            my %attr = @_;
            # attr type ("added"); surrounds text
            # handled in xml_char
        },
    );
    if (exists $handlers{$elem}) {
        $handlers{$elem}->(%attr);
    }
    $flag{last_tag} = [$elem, \%attr];
    $flag{last_item} = [$elem, \%attr];

}
sub xml_end {
    my ($expat, $elem) = @_;
    $in_element{$elem}--;
}
sub xml_char {
    my ($expat, $string) = @_;

    # delay printing of whitespace, so as to prevent it from occurring at the
    # ends of lines
    if ($string =~ /^\s*$/) {
        $current{delayed_text} .= $string;
        return;
    }

    if ($current{delayed_text}) {
        print $current{delayed_text};
        $current{delayed_text} = '';
    }

    if ($flag{new_verse}) {
        if ($opt{html}) {
            if ($current{verse_num} != 1 or ! $opt{big_chapter_numbers}) {
                print "<span class=\"verse_num\">";
                print "<sup>" if $opt{superscript_verse_numbers};
                print $current{verse_num};
                print "</sup>" if $opt{superscript_verse_numbers};
                print "</span>";
                print $opt{nobreak_verse_numbers} ? '&nbsp;' : ' ';
            }
        } else {
            print "$current{verse_num} ";
        }
        $flag{new_verse} = 0;
    }
    $flag{newlines} = 0;
    $flag{linebreak_whitespace} = 0;

    $in_line = 1;

    if ($opt{html} and $in_element{divineName}) {
        $string = "<span class=\"divine_name\">$string</span>";
    }

    if ($opt{html} and $in_element{transChange}) {
        $string = qq{<span class="trans_change">$string</span>};
    }

    print $string;

    undef $flag{last_item};
}

#####
if ($opt{html}) {
    my $filename;

    ## Generate stylesheet
    close STDOUT;
    $filename = sprintf("$opt{output_dir}/style.css");
    open STDOUT, ">$filename";
    push @filelist, "style.css";

    print << "    EOF;";
    .divine_name {
        font-variant: small-caps;
    }

    .verse_num {
    }

    .big_chapter_num {
        float: left;
        font-size: 3em;
        line-height: 0.6em;
        padding-right: 0.15em;
    }
    EOF;

    print << "    EOF;" if $opt{italics};
    .trans_change {
        font-style: italic;
    }
    EOF;

    ## Generate title page
    close STDOUT;
    $filename = sprintf("$opt{output_dir}/$opt{title}.html");
    open STDOUT, ">$filename" or die "Failed to create $filename: $!";
    push @filelist, "$opt{title}.html";

    print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    print "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n";
    print "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xml:lang=\"en\">\n";
    print "<head>\n";
    print "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n";
    print "<title>Title</title>\n";
    print "</head>\n";
    print "<br />\n" x 8;
    print "<h1 align=\"center\">$opt{title}</h1>\n";
    print "<br />\n";
    print "<h2 align=\"center\">".($opt{translation_name}||'')."</h2>\n";
    print "</body>\n</html>\n";

    ## Add table of contents (to be generated later, after processing)
    push @filelist, "contents.html";
} elsif (length($opt{output_file})) {
    # text mode with --output-file (-o)
    close STDOUT;
    *STDOUT = $output_file; # already opened
}

# return a chapter title, as in "Psalm 25", or, if only a book name is passed,
# return the book name part of the chapter title
sub chapter_title {
    my ($name, $num) = @_;
    $name =~ s/^(Psalm)s/$1/; # "Psalm 1" instead of "Psalms 1"
    return $num ? "$name $num" : $name;
}

# generate a set of links to each chapter in the book
sub generate_chapter_links {
    my ($book_name) = @_;
    (my $key = $book_name) =~ s/ /%20/g;

    if ($chapter_count{$book_name}) {
        my $name = chapter_title($book_name);
        $name =~ s/ /&nbsp;/g;

        my $out = qq{<p style="page-break-after: always; line-height: 1.5; text-align: center">\n};

        $out .= join "&nbsp; ", map {
            qq{<a href="#${key}%20$_">$name&nbsp;$_</a> &nbsp;<sub>•</sub>};
        } 1..$chapter_count{$book_name};

        $out .= "</p>\n";

        return $out;
    }
}

# generate a Table of Contents
sub generate_contents_file {
    close STDOUT;
    my $filename = sprintf("$opt{output_dir}/contents.html");
    open STDOUT, ">$filename";
    # contents.html was already added to the file list

    print qq{<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:lang="en">
<head>
<link rel="stylesheet" type="text/css" href="style.css" />
<title>Contents</title>
</head>
<body>
};

    print "<ol>\n";
    for my $book (@book_names) {
        (my $key = $book) =~ s/ /%20/g;
        print qq{<li><a href="$book.html">$book</a>\n};
    }
    print "</ol>\n";

    print "</body>\n</html>\n";
}

sub getline { $_ = <$input_fh>; chomp; $_ }

my @lines;
until (eof $input_fh) {
    $_ = getline;

    s/^(Revelation) of John/$1/; # use the short name of this book

    if (/^(.*?) (?:(\d+):)?(\d+): \s*(.*)/) {
        # Consider chapter number optional because some systems of notation do
        # not include one for books of only one chapter, such as Jude.
        my $book_name = $1;
        my $chapter_num = $2;
        my $verse_num = $3;
        my $verse_text = $4;

        push @lines, [$book_name, $chapter_num, $verse_num, $verse_text];

        $chapter_count{$book_name} = $chapter_num
            if !defined $chapter_count{$book_name} or
            $chapter_num > $chapter_count{$book_name};

    } elsif (/^\([a-z]*\)\s*$/i) { # e.g. final "(ESV)" at EOF
        # we can set the translation abbreviation from this line if the user
        # didn't already set one
        $opt{translation_abbrev} ||= $1;
    } else { # not in OSIS
        die "Not valid: $_";
    }
}

for (@lines) {
    my ($book_name, $chapter_num, $verse_num, $verse_text) = @$_;

    if (!defined $current{book_name} or
        $book_name ne $current{book_name}) {
        $current{book_name} = $book_name;
        undef $current{chapter_num};

        if ($opt{html}) {
            print "</body>\n</html>\n";

            # open a separate HTML file per book
            close STDOUT;
            my $filename = sprintf("$opt{output_dir}/%s.html", $book_name);
            open STDOUT, ">$filename";
            push @filelist, "$book_name.html";

            print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
            print "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n";
            print "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xml:lang=\"en\">\n";
            print "<head>\n";
            print "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n";
        }

        warn "xp parse book $book_name\n";
        $xp->parse("<book name=\"$book_name\" />");

        if ($opt{html}) {
            (my $key = $book_name) =~ s/ /%20/g;
            print qq{</head>
<body>
<h1 align=\"center\"><a name="#$key">$book_name</a></h1>
};
            print generate_chapter_links($book_name);
        }
    }

    # add a newline after each set of versions of the same verse when
    # producing a book from multiple texts interwoven
    if ($opt{interverse} and
        ((!defined $current{chapter_num} or $chapter_num ne $current{chapter_num}) or
         (!defined $current{verse_num} or $verse_num ne $current{verse_num}))) {
        print '<br />';
    }

    if (!defined $current{chapter_num} or
        $chapter_num ne $current{chapter_num}) {
        $current{chapter_num} = $chapter_num;

        warn "xp parse chapter $chapter_num\n";
        $xp->parse("<chapter num=\"$chapter_num\" _osis2epub=\"true\" />");
    }

    $current{verse_num} = $verse_num;

    eval {
        $xp->parse("<verse book=\"$book_name\" chapter=\"$chapter_num\" num=\"$verse_num\" _osis2epub=\"true\">$verse_text</verse>");
    };
    if ($@) {
        warn "XML Parse Error at $book_name $chapter_num:$verse_num: $verse_text\n";
        die $@;
    }
}

if ($opt{html}) {
    print "</body>\n</html>\n";
    close STDOUT;

    generate_contents_file();

    open my $filelist, ">$opt{output_dir}/files.list";
    print {$filelist} "$_\n" foreach @filelist;
    close $filelist;
}

if ($opt{epub}) {
    ## use pkg-epub to create the EPUB

    my $ebook_title;
    if ($opt{short_ebook_title}) { # e.g. "ESV Bible"
        my $ebook_title = ($opt{translation_abbrev}
                           ? "$opt{translation_abbrev} " : '') . 'Bible';
    } else { # e.g. "The Holy Bible - English Standard Version"
        $ebook_title = sprintf("$opt{title}%s",
                               $opt{translation_name}
                               ? " - $opt{translation_name}" : '');
    }

    my @rel_paths = map { "$opt{output_dir}/$_" } @filelist;
    system("pkg-epub",
           -o => $opt{output_file},
           -a => 'Various',
           -t => $ebook_title,
           -l => $opt{language},
           ($opt{_output_dir_set} ? () : ('--strip-components' => 2)),
           @rel_paths
        );
}
